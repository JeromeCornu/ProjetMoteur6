#version 330 core

in vec3 fragmentColor;
out vec3 color;
in vec2 UV;


vec3 LightColor = vec3(1, 1, 1);
vec3 MaterialDiffuseColor  = vec3 (0.0f, 0.0f, 0.0f);
vec3 Normal_cameraspace  = vec3 (0.0f, 0.0f, 0.0f);
vec3 LightDirection_cameraspace  = vec3 (0.0f, 0.0f, 0.0f);

float LightPower = 60.0f;
float distance = 1.0f;


uniform sampler2D myTextureSampler;

void main(){
  //color = vec3(1,0,0);
  //color = fragmentColor;

  color = texture( myTextureSampler, UV ).rgb;


  // Light

  // Normal of the computed fragment, in camera space
  vec3 n = normalize( Normal_cameraspace );

  // Direction of the light (from the fragment to the light)
  vec3 l = normalize( LightDirection_cameraspace );

  
  float cosTheta = clamp( dot( n,l ), 0,1 );

  color = MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance); 
  }